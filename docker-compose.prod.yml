version: '3.8'

services:
  # Servicio de la API
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: api-mantas-trenzas-prod
    restart: always
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      # Comentado Redis
      # - REDIS_HOST=redis
      # - REDIS_PORT=6379
      # - REDIS_PASSWORD=${REDIS_PASSWORD}
      - USE_REDIS_MOCK=true
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN}
    volumes:
      - ./logs:/app/logs
    depends_on:
      - mysql
      # - redis
    networks:
      - app-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # Servicio de MySQL
  mysql:
    image: mysql:8.0
    container_name: mysql-mantas-trenzas-prod
    restart: always
    ports:
      - "3306:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=${DB_PASSWORD}
      - MYSQL_DATABASE=${DB_NAME}
      - MYSQL_USER=${DB_USER}
      - MYSQL_PASSWORD=${DB_PASSWORD}
    volumes:
      - mysql-data:/var/lib/mysql
    networks:
      - app-network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G

  # Servicio de Redis para cach√© (comentado)
  # redis:
  #   image: redis:7.0-alpine
  #   container_name: redis-mantas-trenzas-prod
  #   restart: always
  #   command: redis-server --requirepass ${REDIS_PASSWORD}
  #   ports:
  #     - "6379:6379"
  #   volumes:
  #     - redis-data:/data
  #   networks:
  #     - app-network
  #   deploy:
  #     resources:
  #       limits:
  #         cpus: '0.3'
  #         memory: 256M

  # Nginx como proxy inverso
  nginx:
    image: nginx:alpine
    container_name: nginx-mantas-trenzas-prod
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - api
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  mysql-data:
  # redis-data:
